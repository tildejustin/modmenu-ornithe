plugins {
	id 'maven-publish'
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'ploceus' version '1.5-SNAPSHOT'
}

base {
	archivesName = project.archives_base_name
}
version = "${project.version}+mc${project.minecraft_version}-optifine"
group = project.maven_group

loom {
	clientOnlyMinecraftJar()
}

ploceus {
	clientOnlyMappings()
}

repositories {
	maven {
		name = 'Quilt'
		url = 'https://maven.quiltmc.org/repository/release'
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered {
		mappings "net.ornithemc:feather:${project.minecraft_version}-client+build.${project.feather_build}:v2"
		addLayer ploceus.nestedMappings()
	}
	nests "net.ornithemc:nests:${project.minecraft_version}-client+build.${project.nests_build}"
	modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
	compileOnly "org.quiltmc:quilt-loader:${project.quilt_loader_version}"

	ploceus.addCommonLibraries()
	ploceus.dependOsl(project.osl_version, "client")
}

loom {
	accessWidenerPath = file("src/main/resources/modmenu.accesswidener")
}

processResources {
	inputs.property 'version', version

	filesMatching('fabric.mod.json') {
		expand 'version': version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 8
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
//	withJavadocJar()
}

jar {
	from('LICENSE') {
		rename { "${it}_${base.archivesName.get()}" }
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
		def ENV = System.getenv()

		if (ENV.MAVEN_URL) {
			maven {
				url ENV.MAVEN_URL

				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		} else {
			mavenLocal()
		}
	}
}
